import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath "com.bmuschko:gradle-docker-plugin:$docker_plugin_version"
    }
    ext {
        quasar_exclusions = [
                'co.paralleluniverse**',
                'groovy**',
                'com.esotericsoftware.**',
                'jdk**',
                'junit**',
                'kotlin**',
                'net.rubygrapefruit.**',
                'org.gradle.**',
                'org.apache.**',
                'org.jacoco.**',
                'org.junit**',
                'org.slf4j**',
                'worker.org.gradle.**',
                'com.nhaarman.mockito_kotlin**',
                'org.assertj**',
                'org.hamcrest**',
                'org.mockito**',
                'org.opentest4j**',
                'org.springframework**',
                'reactor.core.publisher**',
                'com.github.manosbatsis.corbeans.spring.boot**'
        ]
    }
}

allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'idea'
    idea {
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
        maven { url 'https://software.r3.com/artifactory/corda-dependencies' }
        maven { url 'https://software.r3.com/artifactory/corda-lib-all' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-solutions-releases' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local" }
    }
    sourceSets {
        main {
            resources {
                srcDir rootProject.file("config/dev")
            }
        }
        test {
            resources {
                srcDir rootProject.file("config/test")
            }
        }
    }
    dependencies {
        configurations.all {
            resolutionStrategy {
                force(group: corda_release_group, name: "corda", version: corda_release_version)
                force(group: corda_release_group, name: "corda-node-driver", version: corda_release_version)
                force(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version)
                force(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-common', version: kotlin_version)
                force(group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version)
                force(group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4j_version)
                force(group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4j_version)
                force(group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4j_version)
                force(group: 'org.apache.logging.log4j', name: 'log4j-web', version: log4j_version)
                force(group: 'com.google.guava', name: 'guava', version: guava_version)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jackson_version)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jackson_version)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version)
                force(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jackson_version)
                force(group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: jackson_version)
                force(group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: jackson_version)
                force(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: jackson_version)
                force(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jackson_version)
                force(group: 'com.esotericsoftware', name: 'kryo', version: kryo_version)
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = sourceCompatibility
            freeCompilerArgs = ["-Xjsr305=strict"]
            javaParameters = true   // Useful for reflection.
        }
    }
    tasks.withType(Test) {
        useJUnitPlatform()
        systemProperties = [
                'junit.jupiter.extensions.autodetection.enabled': 'true',
                'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
        ]
    }
    test {
        useJUnitPlatform {
            maxHeapSize = "3g"
            includeEngines 'junit-jupiter'
            testLogging.showStandardStreams = true
            testLogging.exceptionFormat = 'full'
        }
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'com.bmuschko.docker-remote-api'

dependencies {
    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    cordaCompile "org.apache.logging.log4j:log4j-web:$log4j_version"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    // Token SDK dependencies.
//    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
//    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
//    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"

    // Accounts dependencies
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
    cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"

//    // Business Networks
//    cordapp "$corda_bn_release_group:business-networks-contracts:$corda_bn_release_version"
//    cordapp "$corda_bn_release_group:business-networks-workflows:$corda_bn_release_version"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
        cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
        cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"
//        cordapp "$corda_bn_release_group:business-networks-contracts:$corda_bn_release_version"
//        cordapp "$corda_bn_release_group:business-networks-workflows:$corda_bn_release_version"
//        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
//        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
//        cordapp("$tokens_release_group:tokens-money:$tokens_release_version")
        cordapp project(':contracts')
        cordapp project(':workflows')
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
        runSchemaMigration = true
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: true]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }
    node {
        name "O=Dummy,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
//        TODO Fix webserver on Cordform
//        webPort 8080
//        webserverJar "$rootDir/webserver/build/libs/webserver-${version}.jar"
    }
}

task installQuasar(type: Copy) {
    onlyIf {
        !rootProject.file("lib/quasar.jar").exists()
    }
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

task runNodes(type: Exec, group: 'cordformation') {
    environment.put('JAVA_HOME', Jvm.current().getJavaHome())
    commandLine "$projectDir/build/nodes/runnodes"
    dependsOn 'deployNodes'
}

task runMigrations(group: 'cordformation')
//task copyWebServerJars(group: 'cordformation')

// Configure run migration scripts for all nodes
file("$projectDir/build/nodes").listFiles().findAll {
    f -> f.isDirectory() && f.name != '.cache'
}.each { node ->
    registerRunMigration(node)
//    registerCopyWebServerJar(node)
}

def registerRunMigration(File node) {
    tasks.register("runMigration$node.name", JavaExec) {
        it.workingDir = file("$projectDir/build/nodes/$node.name")
        it.classpath = files("$projectDir/build/nodes/$node.name/cordapps/contracts-${version}.jar")
        it.args "$projectDir/build/nodes/$node.name/corda.jar", 'run-migration-scripts', '--app-schemas'
        it.jvmArgs '-ea', "-javaagent:$projectDir/lib/quasar.jar"
        it.mustRunAfter 'deployNodes'
        it.main = '-jar'
    }
    // Comment to deactivate migration scripts
    runMigrations.dependsOn += "runMigration$node.name"
}

// TODO Fix webserver on Cordform
//def registerCopyWebServerJar(File node) {
//    tasks.register("copyWebServerJar$node.name", Copy) {
//        it.destinationDir = node
//        it.from(rootProject.file("$rootDir/webserver/build/libs")) {
//            rename 'webserver-(.*).jar', 'corda-webserver.jar'
//        }
//    }
//    copyWebServerJars.dependsOn += "copyWebServerJar$node.name"
//}
